name: release

on:
  release:
    types: [published]
    branches: [main]


jobs:
  publish:
    runs-on: ubuntu-latest
    environment: release
    steps:
    - name: Checkout project
      uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Install and configure Poetry
      uses: abatilo/actions-poetry@v2
      with:
        poetry-version: '1.6.1'
    - name: Export tag
      id: vars
      run: echo tag=${GITHUB_REF#refs/*/} >> $GITHUB_OUTPUT
    - name: Mint API token
      id: mint-token
      run: |
        # retrieve the ambient OIDC token
        resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
        oidc_token=$(jq '.value' <<< "${resp}")

        # exchange the OIDC token for an API token
        resp=$(curl -X POST https://pypi.org/_/oidc/github/mint-token -d "{\"token\": \"${oidc_token}\"}")
        api_token=$(jq '.token' <<< "${resp}")

        # mask the newly minted API token, so that we don't accidentally leak it
        echo "::add-mask::${api_token}"

        # see the next step in the workflow for an example of using this step output
        echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"
    - name: Build and publish
      run: |
        poetry version $RELEASE_VERSION
        poetry build
        poetry config pypi-token.pypi $(PYPI_TOKEN)
        poetry publish --dry-run
        poetry publish
      env:
        PYPI_TOKEN: ${{ steps.mint-token.outputs.api-token }}
        RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
